version: "3.7"

x-airflow-common:
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.2}
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  env_file:
      - path: .env
  environment: &airflow-common-env
    S3_ENDPOINT: http://minio:9000
    S3_ACCESS_KEY: ${S3_ACCESS_KEY}
    S3_SECRET_KEY: ${S3_SECRET_KEY}
    S3_PATH_STYLE_ACCESS: "true"
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://pgairflow:pgairflow@postgres_airflow/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://pgairflow:pgairflow@postgres_airflow/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis_af:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    # _PIP_ADDITIONAL_REQUIREMENTS: apache-airflow==2.8.2 dbt-core dbt-trino trino airflow-dbt dbt-dremio
    _PIP_ADDITIONAL_REQUIREMENTS: apache-airflow==2.8.2 dbt-core airflow-dbt dbt-dremio
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./dbts:/opt/airflow/dbts
    - ./dbts_dremio:/opt/airflow/dbts_dremio
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/config:/opt/airflow/config
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/config/airflow.cfg:/opt/airflow/airflow.cfg
    - ./airflow/config/my_constants.py:/opt/airflow/my_constants.py
    - ./airflow/config/user_auth.py:/opt/airflow/user_auth.py
    - ./airflow/config/webserver_config.py:/opt/airflow/webserver_config.py
  user: "50000"
  depends_on: &airflow-common-depends-on
    redis_airflow:
      condition: service_healthy
    postgres_airflow:
      condition: service_healthy
  networks:
    - lakehouse-net

services:
  redis:
    image: redis:latest
    container_name: superset_cache
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      - lakehouse-net
  
  sup_db:
    env_file:
      - path: .env # default
        required: true
    image: postgres:15
    container_name: superset_db
    hostname: superset_db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DATABASE_DB}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - db_home:/var/lib/postgresql/data
      - ./docker/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U superset -d superset"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - lakehouse-net

  postgres:
    image: postgres:15
    env_file:
      - path: .env
    container_name: keycloak_db
    hostname: keycloak_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5 
    networks:
      - lakehouse-net

  keycloak:
    image: keycloak/keycloak:21.0.2
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloak_db
      DB_DATABASE: keycloak
      DB_USER: ${KC_USER}
      DB_SCHEMA: public
      DB_PASSWORD: ${KC_PASSWORD}
      KEYCLOAK_ADMIN : ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
    container_name: keycloak
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    command: start-dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/realms/master"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - lakehouse-net

  superset-app:
    container_name: superset
    env_file: .env
    image: apache/superset:4.0.0
    user: "root"
    ports:
      - $HOST_PORT:$SUPERSET_PORT
    depends_on: 
      - redis
      - sup_db
    volumes: 
      - ./docker:/app/docker
    environment:
      - FLASK_ENV=development
      - SUPERSET_ENV=development
      - FLASK_DEBUG=True
    command: [ "/app/docker/docker-bootstrap.sh", "app-gunicorn" ]
    networks:
      - lakehouse-net
    
  superset-init:
    image: apache/superset:4.0.0
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file:
      - path: .env
        required: true
    depends_on: 
      - redis
      - sup_db
    volumes: 
      - ./docker:/app/docker
    user: "root"
    environment:
      CYPRESS_CONFIG: "${CYPRESS_CONFIG:-}"
    healthcheck:
      disable: true
    networks:
      - lakehouse-net

  spark_notebook:
    image: alexmerced/spark33-notebook
    ports: 
      - 8888:8888
    env_file: .env
    container_name: notebook
    volumes:
      - ./postBuild:/usr/local/bin/postBuild
    entrypoint: ["/bin/bash", "-c", "/usr/local/bin/postBuild && start-notebook.sh"]
    networks:
    - lakehouse-net

  trino:
    ports:
      - "8090:8080"
    image: "trinodb/trino:447"
    env_file:
      - path: .env
    container_name: trino
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MINIO_CILENT_ID: ${S3_ACCESS_KEY}
      MINIO_SECRET_KEY: ${S3_SECRET_KEY}
      NESSIE_TOKEN: ${NESSIE_TOKEN}

    volumes:
      - ./docker/trino/etc/config.properties:/etc/trino/config.properties
      - ./docker/trino/etc/clustercoord.pem:/etc/clustercoord.pem
      - ./docker/trino/etc/server.cert:/usr/local/certs/server.cert
      - ./docker/trino/etc/catalog/iceberg.properties:/etc/trino/catalog/iceberg.properties
      - ./docker/trino/etc/catalog/postgres.properties:/etc/trino/catalog/postgres.properties
      - ./docker/trino/etc/catalog/iceberg_hive.properties:/etc/trino/catalog/iceberg_hive.properties
      - ./docker/trino/etc/catalog/mongo.properties:/etc/trino/catalog/mongo.properties
    networks:
      - lakehouse-net

  minioserver:
    image: minio/minio
    env_file:
      - path: .env
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_IDENTITY_OPENID_CONFIG_URL_KEYCLOAK_PRIMARY: "http://keycloak:8080/realms/nemo/.well-known/openid-configuration"
      MINIO_IDENTITY_OPENID_CLIENT_ID_KEYCLOAK_PRIMARY: ${MINIO_CILENT_ID}
      MINIO_IDENTITY_OPENID_CLIENT_SECRET_KEYCLOAK_PRIMARY: ${MINIO_SECRET_KEY} 
      MINIO_IDENTITY_OPENID_CLAIM_NAME_KEYCLOAK_PRIMARY: "policy"
      MINIO_IDENTITY_OPENID_DISPLAY_NAME_KEYCLOAK_PRIMARY: "SSO-Keycloak"
      MINIO_IDENTITY_OPENID_SCOPES_KEYCLOAK_PRIMARY: "openid"
      MINIO_IDENTITY_OPENID_REDIRECT_URI_KEYCLOAK_PRIMARY: "http://locahost:9001/oauth_callback"
      MINIO_IDENTITY_OPENID_REDIRECT_URI_DYNAMIC_KEYCLOAK_PRIMARY: "on"
    container_name: minio
    command: server /data --console-address ":9001"
    networks:
      - lakehouse-net

  nessie:
    image: ghcr.io/projectnessie/nessie:latest
    ports:
      - "19120:19120"
    environment:
      NESSIE_VERSION_STORE_TYPE: IN_MEMORY
      NESSIE_SERVER_AUTHENTICATION_ENABLED: true
      QUARKUS_OIDC_ENABLED: true
      QUARKUS_OIDC_AUTH_SERVER_URL: http://keycloak:8080/realms/nemo
      QUARKUS_OIDC_CLIENT_ID: nessie
    networks:
      - lakehouse-net

  dremio:
    platform: linux/x86_64
    image: dremio/dremio-oss:latest
    ports:
      - 9047:9047
      - 31010:31010
      - 32010:32010
    container_name: dremio
    environment:
      - DREMIO_JAVA_SERVER_EXTRA_OPTS=-Dpaths.dist=file:///opt/dremio/data/dist
    networks:
      - lakehouse-net

  metastore_db:
    image: postgres:15
    env_file:
      - path: .env
    hostname: metastore_db
    container_name: metastore_db
    environment:
      POSTGRES_USER: ${HIVE_DB_USER}
      POSTGRES_PASSWORD: ${HIVE_DB_PASSWORD}
      POSTGRES_DB: metastore
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U superset -d superset"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - lakehouse-net

  hive-metastore:
    container_name: hive-metastore
    env_file:
      - path: .env
    hostname: hive-metastore
    image: 'starburstdata/hive:3.1.2-e.15'
    ports:
      - '9083:9083' 
    environment:
      HIVE_METASTORE_DRIVER: org.postgresql.Driver
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://metastore_db:5432/metastore
      HIVE_METASTORE_USER: ${HIVE_DB_USER}
      HIVE_METASTORE_PASSWORD: ${HIVE_DB_PASSWORD}
      HIVE_METASTORE_WAREHOUSE_DIR: s3a://nemohouse/
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_PATH_STYLE_ACCESS: "true"
      REGION: ""
      GOOGLE_CLOUD_KEY_FILE_PATH: ""
      AZURE_ADL_CLIENT_ID: ""
      AZURE_ADL_CREDENTIAL: ""
      AZURE_ADL_REFRESH_URL: ""
      AZURE_ABFS_STORAGE_ACCOUNT: ""
      AZURE_ABFS_ACCESS_KEY: ""
      AZURE_WASB_STORAGE_ACCOUNT: ""
      AZURE_ABFS_OAUTH: ""
      AZURE_ABFS_OAUTH_TOKEN_PROVIDER: ""
      AZURE_ABFS_OAUTH_CLIENT_ID: ""
      AZURE_ABFS_OAUTH_SECRET: ""
      AZURE_ABFS_OAUTH_ENDPOINT: ""
      AZURE_WASB_ACCESS_KEY: ""
    depends_on:
      metastore_db:
        condition: service_healthy
    networks:
      - lakehouse-net

  # flink-jobmanager:
  #   image: alexmerced/flink-iceberg:latest
  #   ports:
  #     - "8081:8081"
  #   command: jobmanager
  #   environment:
  #     - |
  #       FLINK_PROPERTIES=
  #       jobmanager.rpc.address: flink-jobmanager
  #     - AWS_ACCESS_KEY_ID= ${flink}
  #     - AWS_SECRET_ACCESS_KEY=${flink}
  #     - AWS_REGION=us-east-1
  #     - AWS_DEFAULT_REGION=us-east-1
  #     - S3_ENDPOINT=http://minio:9000
  #     - S3_PATH_STYLE_ACCESS=true
  #   networks:
  #     - lakehouse-net

  # flink-taskmanager:
  #   image: alexmerced/flink-iceberg:latest
  #   depends_on:
  #     - flink-jobmanager
  #   command: taskmanager
  #   scale: 1
  #   environment:
  #     - |
  #       FLINK_PROPERTIES=
  #       jobmanager.rpc.address: flink-jobmanager
  #       taskmanager.numberOfTaskSlots: 2
  #     - AWS_ACCESS_KEY_ID=V3WzpN0bJ69UoyFEN990
  #     - AWS_SECRET_ACCESS_KEY=vEwxoDZMjhOV1sEl4IUK9uCxotQoPJS8Uw4U2oL5
  #     - AWS_REGION=us-east-1
  #     - AWS_DEFAULT_REGION=us-east-1
  #     - S3_ENDPOINT=http://minio:9000
  #     - S3_PATH_STYLE_ACCESS=true
  #   networks:
  #     - lakehouse-net

  mongo:
    container_name: mongo
    image: mongo:5.0.5
    ports:
    - 27017:27017
    volumes:
    - ./mongo/init.sh:/docker-entrypoint-initdb.d/mongo-init.sh
    - ./mongo/keyfile.pem:/tmp/keyfile.pem.orig:ro
    entrypoint:
    - bash
    - -c
    - |
         cp /tmp/keyfile.pem.orig /tmp/keyfile.pem
         chmod 400 /tmp/keyfile.pem
         chown 999:999 /tmp/keyfile.pem
         exec docker-entrypoint.sh $$@
    command: ["mongod", "--bind_ip", "0.0.0.0", "--replSet", "rs0", "--auth", "--keyFile", "/tmp/keyfile.pem"]
    networks:
      - lakehouse-net

  admin:
    image: adminer
    restart: always
    ports:
      - 8085:8080 
    networks:
      - lakehouse-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - lakehouse-net

  broker:
    image: confluentinc/cp-server:7.5.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'   
    networks:
      - lakehouse-net

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8084:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081  
    networks:
      - lakehouse-net

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.6.2-7.5.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.5.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR   
    networks:
      - lakehouse-net

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021     
    networks:
      - lakehouse-net

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.5.0
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
    networks:
      - lakehouse-net
  
  postgres_airflow:
    image: postgres:15
    container_name: postgres_airflow
    env_file:
      - path: .env
    environment:
      - POSTGRES_USER=${PG_AIRFLOW_USER}
      - POSTGRES_PASSWORD=${PG_AIRFLOW_PASSWORD}
      - POSTGRES_DB=airflow
      - POSTGRES_PORT=5432
    ports:
      - "5431:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - lakehouse-net

  redis_airflow:
    image: redis:latest
    container_name: redis_af
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - lakehouse-net
  
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8081:8080"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:8080/health"
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:8974/health"
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"'
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "50000" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "50000" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ./airflow/:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

volumes:
  redis:
    external: false
  db_home:
    external: false
  postgres_data:

networks:
  lakehouse-net:
    driver: bridge  